FROM ubuntu:22.04


ARG DEBIAN_FRONTEND=noninteractive

# ARGS for Build
ARG nvidia_driver_version=515
ARG nvidia_apt_version=515.43.04-0ubuntu1
ARG ubuntu_short_version=2204

SHELL ["/bin/bash", "-o", "pipefail", "-c"]

###########
# NVIDIA Driver

RUN apt-get update --fix-missing
RUN apt-get dist-upgrade -y
RUN DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
                       pkg-config software-properties-common gpg-agent wget

RUN DEBIAN_FRONTEND=noninteractive add-apt-repository -y ppa:graphics-drivers/ppa
RUN apt-get update --fix-missing

RUN apt-get update && apt-get install -y --no-install-recommends \
    gnupg2 curl ca-certificates && \
    curl -fsSL https://developer.download.nvidia.com/compute/cuda/repos/ubuntu$ubuntu_short_version/x86_64/3bf863cc.pub | gpg --dearmour -o /usr/share/keyrings/nvidiacuda.gpg  && \
    echo "deb [arch=amd64 signed-by=/usr/share/keyrings/nvidiacuda.gpg] https://developer.download.nvidia.com/compute/cuda/repos/ubuntu$ubuntu_short_version/x86_64 /" > /etc/apt/sources.list.d/cuda.list

RUN apt-get update

RUN DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends nvidia-driver-$nvidia_driver_version=$nvidia_apt_version libnvidia-gl-$nvidia_driver_version=$nvidia_apt_version \
    nvidia-dkms-$nvidia_driver_version=$nvidia_apt_version nvidia-kernel-source-$nvidia_driver_version=$nvidia_apt_version libnvidia-compute-$nvidia_driver_version=$nvidia_apt_version \
    libnvidia-decode-$nvidia_driver_version=$nvidia_apt_version libnvidia-encode-$nvidia_driver_version=$nvidia_apt_version \
    xserver-xorg-video-nvidia-$nvidia_driver_version=$nvidia_apt_version libnvidia-cfg1-$nvidia_driver_version=$nvidia_apt_version \
    libnvidia-fbc1-$nvidia_driver_version=$nvidia_apt_version nvidia-kernel-common-$nvidia_driver_version=$nvidia_apt_version libnvidia-extra-$nvidia_driver_version=$nvidia_apt_version\
    nvidia-compute-utils-$nvidia_driver_version=$nvidia_apt_version \
    nvidia-utils-$nvidia_driver_version=$nvidia_apt_version


############
# CUDA 
ENV CUDA_VERSION 11.7.0

# For libraries in the cuda-compat-* package: https://docs.nvidia.com/cuda/eula/index.html#attachment-a
RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    cuda-cudart-11-7 \
    cuda-compat-11-7 \
    && ln -s cuda-11.4 /usr/local/cuda && \
    rm -rf /var/lib/apt/lists/*

# Required for nvidia-docker v1
RUN echo "/usr/local/nvidia/lib" >> /etc/ld.so.conf.d/nvidia.conf && \
    echo "/usr/local/nvidia/lib64" >> /etc/ld.so.conf.d/nvidia.conf

ENV PATH /usr/local/nvidia/bin:/usr/local/cuda/bin:${PATH}
ENV LD_LIBRARY_PATH /usr/local/nvidia/lib:/usr/local/nvidia/lib64

# nvidia-container-runtime
ENV NVIDIA_VISIBLE_DEVICES all
ENV NVIDIA_DRIVER_CAPABILITIES compute,utility
ENV NVIDIA_REQUIRE_CUDA "cuda>=11.4 brand=tesla,driver>=418,driver<=515 brand=tesla,driver>=460,driver<=515"

###########
# Develop Docker
RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    cuda-cudart-dev-11-7 \
    cuda-command-line-tools-11-7 \
    cuda-minimal-build-11-7 \
    cuda-libraries-dev-11-7 \
    cuda-nvml-dev-11-7 \
    libnpp-dev-11-7 \
    libcublas-dev-11-7 \
    libcusparse-dev-11-7


### 
# micromamba python

ENV CONDA_DIR=/opt/conda \
    SHELL=/bin/bash 
ENV PATH="${CONDA_DIR}/bin:${PATH}" 
ARG PYTHON_VERSION=3.9

COPY initial-condarc "${CONDA_DIR}/.condarc"
WORKDIR /tmp
RUN set -x && \
    arch=$(uname -m) && \
    if [ "${arch}" = "x86_64" ]; then \
        # Should be simpler, see <https://github.com/mamba-org/mamba/issues/1437>
        arch="64"; \
    fi && \
    wget -qO /tmp/micromamba.tar.bz2 \
        "https://micromamba.snakepit.net/api/micromamba/linux-${arch}/latest" && \
    tar -xvjf /tmp/micromamba.tar.bz2 --strip-components=1 bin/micromamba && \
    rm /tmp/micromamba.tar.bz2 && \
    PYTHON_SPECIFIER="python=${PYTHON_VERSION}" && \
    if [[ "${PYTHON_VERSION}" == "default" ]]; then PYTHON_SPECIFIER="python"; fi && \
    if [ "${arch}" == "aarch64" ]; then \
        # Prevent libmamba from sporadically hanging on arm64 under QEMU
        # <https://github.com/mamba-org/mamba/issues/1611>
        # We don't use `micromamba config set` since it instead modifies ~/.condarc.
        echo "extract_threads: 1" >> "${CONDA_DIR}/.condarc"; \
    fi && \
    # Install the packages
    ./micromamba install \
        --root-prefix="${CONDA_DIR}" \
        --prefix="${CONDA_DIR}" \
        --yes \
        "${PYTHON_SPECIFIER}" \
        'mamba' \
        'libpython-static' \
        'numpy'  && \
    rm micromamba && \
    # Pin major.minor version of python
    mamba list python | grep '^python ' | tr -s ' ' | cut -d ' ' -f 1,2 >> "${CONDA_DIR}/conda-meta/pinned" && \
    mamba clean --all -f -y 


COPY docker/build-gstreamer/install-dependencies /

RUN ["/install-dependencies"]
